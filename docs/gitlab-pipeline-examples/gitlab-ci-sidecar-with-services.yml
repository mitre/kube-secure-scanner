stages:
  - deploy
  - scan
  - report
  - cleanup

variables:
  SCANNER_NAMESPACE: "inspec-test"
  TARGET_LABEL: "app=target-app"
  THRESHOLD_VALUE: "70"  # Minimum passing score (0-100)
  TARGET_IMAGE: "registry.example.com/my-image:latest"  # Target image to scan
  # If scanning a distroless image, set this to true
  IS_DISTROLESS: "false"

# Define a custom service image for CINC Auditor sidecar deployment
services:
  - name: registry.example.com/cinc-auditor-scanner:latest
    alias: cinc-scanner
    entrypoint: ["sleep", "infinity"]

deploy_sidecar_pod:
  stage: deploy
  script:
    - echo "$KUBE_CONFIG" | base64 -d > kubeconfig.yaml
    - export KUBECONFIG=kubeconfig.yaml
    - |
      # Create the namespace if it doesn't exist
      kubectl get namespace ${SCANNER_NAMESPACE} || kubectl create namespace ${SCANNER_NAMESPACE}
      
      # Copy profile from within the service container
      docker cp ${CINC_PROFILE_PATH} cinc-scanner:/tmp/profile
      docker exec cinc-scanner ls -la /tmp/profile
      
      # Create ConfigMap for CINC profile from the service container
      kubectl create configmap inspec-profiles-${CI_PIPELINE_ID} \
        --from-file=container-baseline=$(docker exec cinc-scanner find /tmp/profile -name "*.rb" | head -1) \
        -n ${SCANNER_NAMESPACE}
      
      # Create ConfigMap for threshold
      cat > threshold.yml << EOF
      compliance:
        min: ${THRESHOLD_VALUE}
      failed:
        critical:
          max: 0
      EOF
      
      kubectl create configmap inspec-thresholds-${CI_PIPELINE_ID} \
        --from-file=threshold.yml=threshold.yml \
        -n ${SCANNER_NAMESPACE}
      
      # Deploy the pod with sidecar scanner
      cat <<EOF | kubectl apply -f -
      apiVersion: v1
      kind: Pod
      metadata:
        name: app-scanner-${CI_PIPELINE_ID}
        namespace: ${SCANNER_NAMESPACE}
        labels:
          app: scanner-pod
          pipeline: "${CI_PIPELINE_ID}"
      spec:
        shareProcessNamespace: true  # Enable shared process namespace
        containers:
        # Target container to be scanned
        - name: target
          image: ${TARGET_IMAGE}
          command: ["sleep", "3600"]
          # For distroless containers, adjust command accordingly
          
        # CINC Auditor scanner sidecar
        - name: scanner
          image: registry.example.com/cinc-auditor-scanner:latest
          command: 
          - "/bin/bash"
          - "-c"
          - |
            # Wait for the main container to start
            sleep 10
            
            echo "Starting CINC Auditor scan..."
            
            # Find the main process of the target container
            TARGET_PID=$(ps aux | grep -v grep | grep "sleep 3600" | head -1 | awk '{print $2}')
            
            if [ -z "$TARGET_PID" ]; then
              echo "ERROR: Could not find target process"
              exit 1
            fi
            
            echo "Target process identified: PID $TARGET_PID"
            
            # Run CINC Auditor against the target filesystem
            cd /
            cinc-auditor exec /opt/profiles/container-baseline \
              -b os=linux \
              --target=/proc/$TARGET_PID/root \
              --reporter cli json:/results/scan-results.json
            
            SCAN_EXIT_CODE=$?
            
            echo "Scan completed with exit code: $SCAN_EXIT_CODE"
            
            # Process results with SAF
            if [ -f "/results/scan-results.json" ]; then
              echo "Processing results with SAF CLI..."
              saf summary --input /results/scan-results.json --output-md /results/scan-summary.md
              
              # Validate against threshold
              if [ -f "/opt/thresholds/threshold.yml" ]; then
                echo "Validating against threshold..."
                saf threshold -i /results/scan-results.json -t /opt/thresholds/threshold.yml
                THRESHOLD_RESULT=$?
                echo "$THRESHOLD_RESULT" > /results/threshold-result.txt
              fi
            fi
            
            # Indicate scan is complete
            touch /results/scan-complete
            
            # Keep container running briefly to allow result retrieval
            echo "Scan complete. Results available in /results directory."
            sleep 300
          volumeMounts:
          - name: shared-results
            mountPath: /results
          - name: profiles
            mountPath: /opt/profiles
          - name: thresholds
            mountPath: /opt/thresholds
        
        volumes:
        - name: shared-results
          emptyDir: {}
        - name: profiles
          configMap:
            name: inspec-profiles-${CI_PIPELINE_ID}
        - name: thresholds
          configMap:
            name: inspec-thresholds-${CI_PIPELINE_ID}
      EOF
      
      # Wait for pod to be ready
      kubectl wait --for=condition=ready pod/app-scanner-${CI_PIPELINE_ID} -n ${SCANNER_NAMESPACE} --timeout=300s
      
      # Save pod name for later stages
      echo "SCANNER_POD=app-scanner-${CI_PIPELINE_ID}" >> deploy.env
    - |
      # Verify the pod is ready
      kubectl get pod app-scanner-${CI_PIPELINE_ID} -n ${SCANNER_NAMESPACE}
  artifacts:
    reports:
      dotenv: deploy.env

retrieve_results:
  stage: scan
  needs: [deploy_sidecar_pod]
  script:
    - echo "$KUBE_CONFIG" | base64 -d > kubeconfig.yaml
    - export KUBECONFIG=kubeconfig.yaml
    - |
      # Wait for scan to complete
      echo "Waiting for scan to complete..."
      until kubectl exec -it ${SCANNER_POD} -n ${SCANNER_NAMESPACE} -c scanner -- ls /results/scan-complete >/dev/null 2>&1; do
        echo "Scan in progress..."
        sleep 5
      done
      
      # Retrieve scan results using the service container
      echo "Retrieving scan results..."
      kubectl cp ${SCANNER_NAMESPACE}/${SCANNER_POD}:/results/scan-results.json /tmp/scan-results.json -c scanner
      kubectl cp ${SCANNER_NAMESPACE}/${SCANNER_POD}:/results/scan-summary.md /tmp/scan-summary.md -c scanner
      
      # Copy results to service container for processing
      docker cp /tmp/scan-results.json cinc-scanner:/tmp/
      docker cp /tmp/scan-summary.md cinc-scanner:/tmp/
      
      # Process results in the service container
      docker exec cinc-scanner bash -c "
        # Generate normalized report
        saf normalize -i /tmp/scan-results.json -o /tmp/normalized-results.json
        
        # Additional report processing
        saf view -i /tmp/scan-results.json --output /tmp/scan-report.html
      "
      
      # Copy processed results back
      docker cp cinc-scanner:/tmp/normalized-results.json ./normalized-results.json
      docker cp cinc-scanner:/tmp/scan-report.html ./scan-report.html
      docker cp cinc-scanner:/tmp/scan-results.json ./scan-results.json
      docker cp cinc-scanner:/tmp/scan-summary.md ./scan-summary.md
      
      # Check threshold result
      if kubectl exec -it ${SCANNER_POD} -n ${SCANNER_NAMESPACE} -c scanner -- cat /results/threshold-result.txt >/dev/null 2>&1; then
        THRESHOLD_RESULT=$(kubectl exec -it ${SCANNER_POD} -n ${SCANNER_NAMESPACE} -c scanner -- cat /results/threshold-result.txt)
        echo "THRESHOLD_PASSED=${THRESHOLD_RESULT}" >> scan.env
        
        if [ "${THRESHOLD_RESULT}" -eq 0 ]; then
          echo "✅ Security scan passed threshold requirements"
        else
          echo "❌ Security scan failed to meet threshold requirements"
        fi
      else
        echo "Warning: Threshold result not found"
        echo "THRESHOLD_PASSED=1" >> scan.env
      fi
      
      # Display summary in job output
      echo "============= SCAN SUMMARY ============="
      cat scan-summary.md
      echo "========================================"
  artifacts:
    paths:
      - scan-results.json
      - scan-summary.md
      - normalized-results.json
      - scan-report.html
    reports:
      dotenv: scan.env

# This example shows how to utilize the service container 
# to generate specialized reports from the scan results
generate_report:
  stage: report
  needs: [retrieve_results]
  script:
    - |
      # Use the service container to generate comprehensive reports
      docker cp scan-results.json cinc-scanner:/tmp/
      
      # Generate multiple report formats in the service container
      docker exec cinc-scanner bash -c "
        cd /tmp
        
        # Generate HTML report
        saf view -i scan-results.json --output enhanced-report.html
        
        # Generate CSV report
        saf generate -i scan-results.json -o csv > results.csv
        
        # Generate Excel report
        saf generate -i scan-results.json -o xlsx > results.xlsx
        
        # Generate JUnit report for CI integration
        saf generate -i scan-results.json -o junit > junit.xml
      "
      
      # Copy all reports back
      docker cp cinc-scanner:/tmp/enhanced-report.html ./enhanced-report.html
      docker cp cinc-scanner:/tmp/results.csv ./results.csv
      docker cp cinc-scanner:/tmp/results.xlsx ./results.xlsx
      docker cp cinc-scanner:/tmp/junit.xml ./junit.xml
      
      # Create a simple markdown report for the MR
      cat > scan-report.md << EOF
      # Security Scan Results
      
      ## Summary
      
      $(cat scan-summary.md)
      
      ## Threshold Check
      
      $([ "${THRESHOLD_PASSED}" -eq 0 ] && echo "✅ **PASSED**" || echo "❌ **FAILED**")
      
      Threshold: ${THRESHOLD_VALUE}%
      
      ## Details
      
      For full results, see the enhanced report artifacts.
      
      * HTML Report: enhanced-report.html
      * CSV Report: results.csv
      * Excel Report: results.xlsx
      * JUnit Report: junit.xml
      EOF
  artifacts:
    paths:
      - enhanced-report.html
      - results.csv
      - results.xlsx
      - junit.xml
      - scan-report.md
    reports:
      junit: junit.xml
    when: always

cleanup:
  stage: cleanup
  needs: [retrieve_results]
  when: always  # Run even if previous stages failed
  script:
    - echo "$KUBE_CONFIG" | base64 -d > kubeconfig.yaml
    - export KUBECONFIG=kubeconfig.yaml
    - |
      # Delete all resources
      kubectl delete pod/${SCANNER_POD} -n ${SCANNER_NAMESPACE} --ignore-not-found
      kubectl delete configmap/inspec-profiles-${CI_PIPELINE_ID} -n ${SCANNER_NAMESPACE} --ignore-not-found
      kubectl delete configmap/inspec-thresholds-${CI_PIPELINE_ID} -n ${SCANNER_NAMESPACE} --ignore-not-found