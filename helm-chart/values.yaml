# Default values for inspec-scanner
# This is a YAML-formatted file

# Target namespace for deployment
targetNamespace: inspec-test

# Minikube configuration for local testing
minikube:
  # Enable minikube setup (only for the setup script, not during Helm installation)
  enabled: true
  # Driver to use for minikube
  driver: docker
  # Kubernetes version to use
  k8sVersion: v1.28.3
  # Number of nodes in the cluster
  nodes: 3
  # Custom start args for minikube
  customArgs: ""

# Service account configuration
serviceAccount:
  # Create the service account
  create: true
  # Name of the service account
  name: inspec-scanner
  # Annotations for the service account
  annotations: {}
  # Labels for the service account
  labels:
    app: inspec-scanner
    purpose: security-scanning

# RBAC configuration
rbac:
  # Create the role and role binding
  create: true
  # Role name
  roleName: inspec-container-role
  # Role binding name
  roleBindingName: inspec-container-rolebinding
  # Use resource names to restrict access
  useResourceNames: true
  # Use label selectors instead of resource names
  useLabelSelector: false
  # Labels to use for selecting pods
  podSelectorLabels:
    scan-target: "true"
  # Include permissions for ephemeral containers (needed for distroless container scanning)
  includeEphemeralContainers: true

# Test pod configuration
testPod:
  # Deploy a test pod
  deploy: false
  # Name of the test pod
  name: inspec-target
  # Container image
  image: busybox:latest
  # Command to run in the container
  command: ["sleep", "infinity"]
  # Labels for the pod
  labels:
    app: inspec-target
    scan-target: "true"
  # Deploy a distroless test pod as well
  deployDistroless: false
  # Distroless pod configuration
  distroless:
    # Name of the distroless test pod
    name: distroless-target
    # Container image (using Google's distroless as an example)
    image: gcr.io/distroless/static-debian11:latest
    # Command to run in the container
    command: ["/busybox/sleep", "infinity"]
    # Labels for the pod
    labels:
      app: distroless-target
      scan-target: "true"
      distroless: "true"

# Script configuration
scripts:
  # Generate helper scripts
  generate: true
  # Directory to store generated scripts
  directory: "/tmp/inspec-scanner"
  # Include distroless scanning script in ConfigMap
  includeDistrolessScanScript: true

# Debug container configuration for distroless scanning
debugContainer:
  # Enable debug container support
  enabled: true
  # Image to use for debug container
  image: docker.io/cincproject/auditor:latest
  # Default name prefix for the debug container
  namePrefix: debug
  # Default timeout for debug container in seconds
  timeoutSeconds: 300
  # Additional args for the debug container
  additionalArgs: []

# Security settings
security:
  # Default token duration (in minutes)
  tokenDuration: 60
  
# SAF-CLI Configuration
safCli:
  # Enable SAF-CLI integration
  enabled: true
  # Path to external threshold file (threshold.yml or threshold.json)
  # Can be left blank to use built-in threshold settings
  thresholdFilePath: ""
  # Threshold settings for quality gates
  thresholdConfig:
    compliance:
      min: 70   # Default minimum compliance score
    failed:
      critical:
        max: 0  # Zero critical failures allowed
      high:
        max: 2  # Maximum 2 high failures allowed
    skipped:
      total:
        max: 5  # Maximum 5 skipped controls allowed
    error:
      total:
        max: 0  # Zero error controls allowed
  # Fail build if thresholds are not met (set to true for strict enforcement)
  failOnThresholdError: false
  # Report generation options
  reports:
    # Generate summary in Markdown format
    generateSummary: true
    # Generate HTML report view
    generateHtmlReport: true
    # Generate JSON summary
    generateJsonSummary: false