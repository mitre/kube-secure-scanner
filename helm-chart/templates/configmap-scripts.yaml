{{- if .Values.scripts.generate }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: inspec-scanner-scripts
  namespace: {{ .Values.targetNamespace }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  generate-kubeconfig.sh: |-
    #!/bin/bash
    # generate-kubeconfig.sh - Creates a kubeconfig file for a specified service account
    # Usage: ./generate-kubeconfig.sh <namespace> <service-account-name> [output-file] [token-duration]

    set -e

    # Check arguments
    if [ "$#" -lt 2 ]; then
      echo "Usage: $0 <namespace> <service-account-name> [output-file] [token-duration]"
      echo "Example: $0 {{ .Values.targetNamespace }} {{ .Values.serviceAccount.name }} ./kubeconfig.yaml 60m"
      exit 1
    fi

    NAMESPACE=$1
    SA_NAME=$2
    OUTPUT_FILE=${3:-"./kubeconfig.yaml"}
    TOKEN_DURATION=${4:-"{{ .Values.security.tokenDuration }}m"}

    # Get cluster information
    SERVER=$(kubectl config view --minify --output=jsonpath='{.clusters[0].cluster.server}')
    CA_DATA=$(kubectl config view --raw --minify --flatten -o jsonpath='{.clusters[].cluster.certificate-authority-data}')

    # Verify service account exists
    kubectl get serviceaccount ${SA_NAME} -n ${NAMESPACE} &>/dev/null || {
      echo "Error: Service account ${SA_NAME} not found in namespace ${NAMESPACE}"
      exit 1
    }

    # Create token
    echo "Generating token for ${SA_NAME} in namespace ${NAMESPACE} with duration ${TOKEN_DURATION}..."
    TOKEN=$(kubectl create token ${SA_NAME} -n ${NAMESPACE} --duration=${TOKEN_DURATION})

    # Generate kubeconfig
    cat > ${OUTPUT_FILE} << EOF
    apiVersion: v1
    kind: Config
    preferences: {}
    clusters:
    - cluster:
        server: ${SERVER}
        certificate-authority-data: ${CA_DATA}
      name: scanner-cluster
    contexts:
    - context:
        cluster: scanner-cluster
        namespace: ${NAMESPACE}
        user: ${SA_NAME}
      name: scanner-context
    current-context: scanner-context
    users:
    - name: ${SA_NAME}
      user:
        token: ${TOKEN}
    EOF

    # Set proper permissions
    chmod 600 ${OUTPUT_FILE}

    echo "Generated kubeconfig at ${OUTPUT_FILE}"
    echo "This configuration will work until the token expires (${TOKEN_DURATION})"

  scan-container.sh: |-
    #!/bin/bash
    # scan-container.sh - Run an InSpec scan against a container
    # Usage: ./scan-container.sh <pod-name> <container-name> <profile-path> [threshold_file]

    set -e

    # Check arguments
    if [ "$#" -lt 3 ]; then
      echo "Usage: $0 <pod-name> <container-name> <profile-path> [threshold_file]"
      echo "Example: $0 {{ .Values.testPod.name }} {{ .Values.testPod.name }} ~/cinc-profiles/linux-baseline /path/to/threshold.yml"
      echo ""
      echo "Parameters:"
      echo "  pod-name        - Name of the pod to scan"
      echo "  container-name  - Name of the container within the pod to scan"
      echo "  profile-path    - Path to the CINC Auditor profile"
      echo "  threshold_file  - Optional: Path to threshold.yml or threshold.json file"
      echo "                    If not provided, built-in threshold settings will be used"
      exit 1
    fi

    NAMESPACE={{ .Values.targetNamespace }}
    SA_NAME={{ .Values.serviceAccount.name }}
    POD_NAME=$1
    CONTAINER_NAME=$2
    PROFILE_PATH=$3
    THRESHOLD_FILE=$4
    RESULTS_FILE="./scan-results.json"
    SUMMARY_FILE="./scan-summary.md"
    THRESHOLD_CONFIG_FILE="./threshold-$$.yml"

    # Check if SAF CLI is installed
    if ! command -v saf &> /dev/null; then
      echo "MITRE SAF-CLI is not installed. Installing..."
      npm install -g @mitre/saf
    fi

    # Create kubeconfig
    echo "Generating kubeconfig..."
    TOKEN=$(kubectl create token ${SA_NAME} -n ${NAMESPACE} --duration={{ .Values.security.tokenDuration }}m)
    SERVER=$(kubectl config view --minify --output=jsonpath='{.clusters[0].cluster.server}')
    CA_DATA=$(kubectl config view --raw --minify --flatten -o jsonpath='{.clusters[].cluster.certificate-authority-data}')

    KUBECONFIG_FILE=$(mktemp)
    cat > ${KUBECONFIG_FILE} << EOF
    apiVersion: v1
    kind: Config
    preferences: {}
    clusters:
    - cluster:
        server: ${SERVER}
        certificate-authority-data: ${CA_DATA}
      name: scanner-cluster
    contexts:
    - context:
        cluster: scanner-cluster
        namespace: ${NAMESPACE}
        user: scanner-user
      name: scanner-context
    current-context: scanner-context
    users:
    - name: scanner-user
      user:
        token: ${TOKEN}
    EOF

    chmod 600 ${KUBECONFIG_FILE}

    # Run CINC Auditor scan
    echo "Running CINC Auditor scan against ${NAMESPACE}/${POD_NAME}/${CONTAINER_NAME}..."
    KUBECONFIG=${KUBECONFIG_FILE} cinc-auditor exec ${PROFILE_PATH} \
      -t k8s-container://${NAMESPACE}/${POD_NAME}/${CONTAINER_NAME} \
      --reporter cli json:${RESULTS_FILE}

    SCAN_RESULT=$?

    # Process results with SAF-CLI
    echo "Processing results with MITRE SAF-CLI..."
    saf summary --input ${RESULTS_FILE} --output-md ${SUMMARY_FILE}
    {{- if .Values.safCli.reports.generateHtmlReport }}
    saf view -i ${RESULTS_FILE} --output scan-report.html
    echo "HTML report generated at: ./scan-report.html"
    {{- end }}
    {{- if .Values.safCli.reports.generateJsonSummary }}
    saf summary --input ${RESULTS_FILE} --output scan-summary.json
    echo "JSON summary generated at: ./scan-summary.json"
    {{- end }}

    # Display summary
    echo "============= SCAN SUMMARY ============="
    cat ${SUMMARY_FILE}
    echo "========================================"

    # Apply threshold check
    if [ -n "${THRESHOLD_FILE}" ] && [ -f "${THRESHOLD_FILE}" ]; then
      # Use provided threshold file
      echo "Checking against threshold configuration in ${THRESHOLD_FILE}..."
      saf threshold -i ${RESULTS_FILE} -t ${THRESHOLD_FILE}
      THRESHOLD_RESULT=$?
    else
      # Create a threshold configuration based on Helm values
      echo "No threshold file provided. Using built-in threshold settings..."
      cat > ${THRESHOLD_CONFIG_FILE} << EOF
    compliance:
      min: {{ .Values.safCli.thresholdConfig.compliance.min }}
    failed:
      critical:
        max: {{ .Values.safCli.thresholdConfig.failed.critical.max }}
      high:
        max: {{ .Values.safCli.thresholdConfig.failed.high.max }}
    skipped:
      total:
        max: {{ .Values.safCli.thresholdConfig.skipped.total.max }}
    error:
      total:
        max: {{ .Values.safCli.thresholdConfig.error.total.max }}
    EOF
      saf threshold -i ${RESULTS_FILE} -t ${THRESHOLD_CONFIG_FILE}
      THRESHOLD_RESULT=$?
    fi

    if [ $THRESHOLD_RESULT -eq 0 ]; then
      echo "✅ Security scan passed threshold requirements"
    else
      echo "❌ Security scan failed to meet threshold requirements"
      {{- if .Values.safCli.failOnThresholdError }}
      # Return the threshold failure as the script exit code if configured to fail
      SCAN_RESULT=${THRESHOLD_RESULT}
      {{- end }}
    fi

    # Cleanup
    rm ${KUBECONFIG_FILE}
    
    # Remove temporary threshold file if we created one
    if [ -f "${THRESHOLD_CONFIG_FILE}" ]; then
      rm ${THRESHOLD_CONFIG_FILE}
    fi

    echo "Scan results saved to: ${RESULTS_FILE}"
    echo "Scan summary saved to: ${SUMMARY_FILE}"
    exit ${SCAN_RESULT}
{{- end }}