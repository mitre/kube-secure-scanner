{{- if .Values.testPod.deploy }}
apiVersion: v1
kind: Pod
metadata:
  name: {{ .Values.testPod.name }}
  namespace: {{ .Values.common-scanner.scanner-infrastructure.targetNamespace }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    {{- with .Values.testPod.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    description: "Test pod for sidecar container scanning approach"
    containerType: "sidecar-scanner"
spec:
  # Enable shared process namespace between containers
  shareProcessNamespace: {{ .Values.sharedProcessNamespace.enabled }}
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    seccompProfile:
      type: RuntimeDefault
  # Target container to be scanned
  containers:
  - name: {{ .Values.testPod.targetContainer.name }}
    image: {{ .Values.testPod.targetContainer.image }}
    command: {{ .Values.testPod.targetContainer.command | toJson }}
    resources:
      limits:
        cpu: "100m"
        memory: "128Mi"
      requests:
        cpu: "50m"
        memory: "64Mi"
    securityContext:
      allowPrivilegeEscalation: false
      privileged: false
      capabilities:
        drop:
          - ALL
    volumeMounts:
    - name: {{ .Values.volumes.results.name }}
      mountPath: /results

  # CINC Auditor sidecar scanner container
  {{- if .Values.sidecarScanner.enabled }}
  - name: {{ .Values.sidecarScanner.name }}
    image: {{ .Values.sidecarScanner.image }}
    resources:
      {{- toYaml .Values.sidecarScanner.resources | nindent 6 }}
    securityContext:
      {{- toYaml .Values.sidecarScanner.securityContext | nindent 6 }}
    command:
    - "/bin/sh"
    - "-c"
    - |
      # Wait for the target container to start
      sleep 10
      
      echo "Starting CINC Auditor scan..."
      
      # Find the main process of the target container
      TARGET_PID=$(ps aux | grep -v grep | grep "{{ .Values.testPod.targetContainer.name }}" | head -1 | awk '{print $2}')
      
      if [ -z "$TARGET_PID" ]; then
        echo "ERROR: Could not find target process"
        exit 1
      fi
      
      echo "Target process identified: PID $TARGET_PID"
      
      # Run CINC Auditor against the target filesystem
      cd /
      cinc-auditor exec /opt/profiles/{{ .Values.cincAuditor.inspecYml.name }} \
        -b os=linux \
        --target=/proc/$TARGET_PID/root \
        --reporter cli json:/results/scan-results.json
      
      SCAN_EXIT_CODE=$?
      
      echo "Scan completed with exit code: $SCAN_EXIT_CODE"
      
      # Process results with SAF
      if [ -f "/results/scan-results.json" ]; then
        echo "Processing results with SAF CLI..."
        inspec_tools summary -j /results/scan-results.json -o /results/scan-summary.md
        
        # Validate against threshold
        if [ -f "/opt/thresholds/threshold.yml" ]; then
          echo "Validating against threshold..."
          inspec_tools compliance -j /results/scan-results.json -f /opt/thresholds/threshold.yml
          THRESHOLD_RESULT=$?
          echo "$THRESHOLD_RESULT" > /results/threshold-result.txt
        fi
      fi
      
      # Indicate scan is complete
      touch /results/scan-complete
      
      # Keep container running to allow result retrieval
      echo "Scan complete. Results available in /results directory."
      sleep infinity
    volumeMounts:
    - name: {{ .Values.volumes.results.name }}
      mountPath: /results
    - name: {{ .Values.volumes.profiles.name }}
      mountPath: /opt/profiles
    - name: {{ .Values.volumes.thresholds.name }}
      mountPath: /opt/thresholds
  {{- end }}
  
  volumes:
  - name: {{ .Values.volumes.results.name }}
    {{- toYaml .Values.volumes.results.emptyDir | nindent 4 }}
  - name: {{ .Values.volumes.profiles.name }}
    configMap:
      name: {{ default (printf "%s-profiles" .Release.Name) .Values.volumes.profiles.configMap.name }}
  - name: {{ .Values.volumes.thresholds.name }}
    configMap:
      name: {{ default (printf "%s-thresholds" .Release.Name) .Values.volumes.thresholds.configMap.name }}
{{- end }}